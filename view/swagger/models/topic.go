// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Topic 简要话题结构
// swagger:model topic
type Topic struct {

	// 评论数
	// Required: true
	CommentCount *int64 `json:"comment_count"`

	// 话题的全部内容
	// Required: true
	Content *string `json:"content"`

	// 创建时间
	// Required: true
	CreatedAt *string `json:"created_at"`

	// 话题唯一标识别
	// Required: true
	ID *int64 `json:"id"`

	// 点赞数
	// Required: true
	LikeCount *int64 `json:"like_count"`

	// 话题外部链接，可能为空
	// Required: true
	Link *string `json:"link"`

	// 话题评分
	// Required: true
	Score *float32 `json:"score"`

	// 话题来源
	// Required: true
	// Enum: [论坛 自发]
	Source *string `json:"source"`

	// tags
	// Required: true
	Tags []*Tag `json:"tags"`

	// 话题的标题
	// Required: true
	Title *string `json:"title"`

	// user
	// Required: true
	User *UserSummary `json:"user"`
}

// Validate validates this topic
func (m *Topic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommentCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLikeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Topic) validateCommentCount(formats strfmt.Registry) error {

	if err := validate.Required("comment_count", "body", m.CommentCount); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateLikeCount(formats strfmt.Registry) error {

	if err := validate.Required("like_count", "body", m.LikeCount); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

var topicTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["论坛","自发"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topicTypeSourcePropEnum = append(topicTypeSourcePropEnum, v)
	}
}

const (

	// TopicSourceX论坛 captures enum value "论坛"
	TopicSourceX论坛 string = "论坛"

	// TopicSourceX自发 captures enum value "自发"
	TopicSourceX自发 string = "自发"
)

// prop value enum
func (m *Topic) validateSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, topicTypeSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Topic) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", *m.Source); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Topic) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *Topic) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Topic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Topic) UnmarshalBinary(b []byte) error {
	var res Topic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
